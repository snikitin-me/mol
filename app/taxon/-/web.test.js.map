{"version":3,"sources":["../../../test/test.ts","../../../test/test.web.ts","../../../assert/assert.test.ts","../../../assert/assert.ts","../../../dict/dict.test.ts","../../../object/object.test.ts","../../../set/set.test.ts","../../../atom/atom.test.ts","../../../mem/mem.test.ts","../../../dom/make/make.test.ts","../../../view/view.test.ts","../../../state/session/session.test.ts","../../../state/local/local.test.ts","../../../button/button.test.ts","../../../const/const.test.ts","../../../unit/unit.test.ts","../../../../jin/type/type_tests.test.ts","../../../../jin/time/duration/duration_tests.stage=dev.ts","../../../../jin/time/moment/moment_tests.stage=dev.ts"],"names":[],"mappings":"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","file":"web.test.js","sourcesContent":["namespace $ {\n\t\n\texport function $mol_test( set : { [ name : string ] : string | ( ()=> void ) } ) {\n\t\tfor( let name in set ) $mol_test_all.push( new $mol_test_case( set[ name ] ) )\n\t}\n\t\n\texport var $mol_test_all : $mol_test_case[] = []\n\t\n\texport var $mol_test_run = () => {\n\t\tfor( var test of $mol_test_all ) {\n\t\t\ttest.run()\n\t\t}\n\t}\n\t\n\texport class $mol_test_case {\n\t\t\n\t\tcode : ()=> void\n\t\t\n\t\tconstructor( code : string | ( ()=> void ) ) {\n\t\t\tif( typeof code === 'string' ) {\n\t\t\t\tthis.code = <any> new Function( code )\n\t\t\t} else {\n\t\t\t\tthis.code = code\n\t\t\t}\n\t\t}\n\t\t\n\t\trun() {\n\t\t\tthis.code()\n\t\t}\n\t\t\n\t}\n\t\n}\n","/// Autostart tests after all scripts load\nwindow.addEventListener( 'load' , event => {\n\t$.$mol_test_run()\n} )\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'must be false'() {\n\t\t\t$mol_assert_not( 0 )\n\t\t} ,\n\t\t\n\t\t'must be true'() {\n\t\t\t$mol_assert_ok( 1 )\n\t\t} ,\n\t\t\n\t\t'must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'must be unique'() {\n\t\t\t$mol_assert_unique( [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\t\n\texport function $mol_assert_ok( value : any ) {\n\t\tif( value ) return\n\t\tthrow new Error( `Not true (${value})` )\n\t}\n\t\n\texport function $mol_assert_not( value : any ) {\n\t\tif( !value ) return\n\t\tthrow new Error( `Not false (${value})` )\n\t}\n\t\n\texport function $mol_assert_fail( handler : ()=> any , ErrorRight? : any ) {\n\t\ttry {\n\t\t\thandler()\n\t\t} catch( error ) {\n\t\t\tif( ErrorRight ) $mol_assert_ok( error instanceof ErrorRight )\n\t\t\treturn error\n\t\t}\n\t\tthrow new Error( 'Not failed' )\n\t}\n\t\n\texport function $mol_assert_equal< Value >( a : Value , b : Value ) {\n\t\tif( a === b ) return\n\t\tthrow new Error( `Not equal (${a},${b})` )\n\t}\n\t\n\texport function $mol_assert_unique< Value >( a : Value , b : Value ) {\n\t\tif( a !== b ) return\n\t\tthrow new Error( `Not unique (${a},${b})` )\n\t}\n\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'dict shim must have equal api to native Map'() {\n\t\t\tvar dict = new $mol_dict_shim\n\t\t\t\n\t\t\tvar obj1 = {}\n\t\t\tvar obj2 = {}\n\t\t\tvar obj3 = {}\n\t\t\t\n\t\t\tdict.set( obj1 , 1 )\n\t\t\tdict.set( obj2 , 2 )\n\t\t\t\n\t\t\t$mol_assert_equal( dict.size , 2 )\n\t\t\t$mol_assert_ok( dict.has( obj1 ) )\n\t\t\t$mol_assert_ok( dict.has( obj2 ) )\n\t\t\t$mol_assert_not( dict.has( obj3 ) )\n\t\t\t\n\t\t\t$mol_assert_equal( dict.get( obj1 ) , 1 )\n\t\t\t$mol_assert_equal( dict.get( obj2 ) , 2 )\n\t\t\t$mol_assert_equal( dict.get( obj3 ) , void 0 )\n\t\t\t\n\t\t\tvar entries = dict.entries()\n\t\t\t$mol_assert_equal( entries.length , 2 )\n\t\t\t$mol_assert_equal( entries[ 0 ][ 0 ] , obj1 )\n\t\t\t$mol_assert_equal( entries[ 0 ][ 1 ] , 1 )\n\t\t\t$mol_assert_equal( entries[ 1 ][ 0 ] , obj2 )\n\t\t\t$mol_assert_equal( entries[ 1 ][ 1 ] , 2 )\n\t\t\t\n\t\t\tdict.delete( obj2 )\n\t\t\t$mol_assert_not( dict.has( obj2 ) )\n\t\t}\n\t\t\n\t} )\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'init with overload'() {\n\t\t\tclass X extends $mol_object {\n\t\t\t\tfoo() {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new X().setup(\n\t\t\t\tobj => {\n\t\t\t\t\tobj.foo = () => 2\n\t\t\t\t}\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal( x.foo() , 2 )\n\t\t} ,\n\t\t\n\t\t'object path generation'() {\n\t\t\tvar x = new $mol_object\n\t\t\t\n\t\t\t$mol_assert_equal( `${ x }` , '' )\n\t\t\t\n\t\t\tx.object_field( 'foo()' )\n\t\t\t$mol_assert_equal( `${ x }` , '.foo()' )\n\t\t\t\n\t\t\tx.object_field( 'bar()' )\n\t\t\t$mol_assert_equal( `${ x }` , '.foo()' )\n\t\t} ,\n\t\n\t} )\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'set-shim must have equal api to native Set'() {\n\t\t\t\n\t\t\tvar set = new $mol_set_shim\n\t\t\t\n\t\t\tvar obj1 = {}\n\t\t\tvar obj2 = {}\n\t\t\tvar obj3 = {}\n\t\t\t\n\t\t\tset.add( obj1 )\n\t\t\tset.add( obj2 )\n\t\t\t\n\t\t\t$mol_assert_equal( set.size , 2 )\n\t\t\t$mol_assert_ok( set.has( obj1 ) )\n\t\t\t$mol_assert_ok( set.has( obj2 ) )\n\t\t\t$mol_assert_not( set.has( obj3 ) )\n\t\t\t\n\t\t\tvar entries = set.entries()\n\t\t\t$mol_assert_equal( entries.length , 2 )\n\t\t\t$mol_assert_equal( entries[ 0 ][ 0 ] , obj1 )\n\t\t\t$mol_assert_equal( entries[ 0 ][ 1 ] , obj1 )\n\t\t\t$mol_assert_equal( entries[ 1 ][ 0 ] , obj2 )\n\t\t\t$mol_assert_equal( entries[ 1 ][ 1 ] , obj2 )\n\t\t\t\n\t\t\tset.delete( obj2 )\n\t\t\t$mol_assert_not( set.has( obj2 ) )\n\t\t} ,\n\t\t\n\t} )\n}\n","module $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'caching'() {\n\t\t\t\n\t\t\tlet random = new $mol_atom( 'random' , ()=> Math.random() )\n\t\t\t\n\t\t\t$mol_assert_equal( random.get() , random.get() )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'lazyness'() {\n\t\t\t\n\t\t\tlet value = 0\n\t\t\tlet prop = new $mol_atom( 'prop' , ()=> value = 1 )\n\t\t\t\n\t\t\t$mol_defer.run()\n\t\t\t\n\t\t\t$mol_assert_equal( value , 0 )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'instant actualization'() {\n\t\t\t\n\t\t\tlet source = new $mol_atom( 'source' , ( next? : number )=> next || 1 )\n\t\t\tlet middle = new $mol_atom( 'middle' , ()=> source.get() + 1 )\n\t\t\tlet target = new $mol_atom( 'target' , ()=> middle.get() + 1 )\n\t\t\t\n\t\t\t$mol_assert_equal( target.get() , 3 )\n\t\t\t\n\t\t\tsource.set( 2 )\n\t\t\t\n\t\t\t$mol_assert_equal( target.get() , 4 )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'automatic deferred restart'() {\n\t\t\t\n\t\t\tlet targetValue : number\n\t\t\t\n\t\t\tlet source = new $mol_atom( 'source' , ( next? : number )=> next || 1 )\n\t\t\tlet middle = new $mol_atom( 'middle' , ()=> source.get() + 1 )\n\t\t\tlet target = new $mol_atom( 'target' , ()=> targetValue = middle.get() + 1 )\n\t\t\t\n\t\t\ttarget.get()\n\t\t\t$mol_assert_equal( targetValue , 3 )\n\t\t\t\n\t\t\tsource.set( 2 )\n\t\t\t$mol_assert_equal( targetValue , 3 )\n\t\t\t\n\t\t\t$mol_defer.run()\n\t\t\t$mol_assert_equal( targetValue , 4 )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'Right reactive change of source'() {\n\n\t\t\tlet targetValue : number\n\t\t\t\n\t\t\tlet counter = new $mol_atom<number>( 'counter' , next => {\n\t\t\t\tnew $mol_defer( ()=> {\n\t\t\t\t\tcounter.push( next || 1 )\n\t\t\t\t} )\n\t\t\t\tthrow new $mol_atom_wait\n\t\t\t} )\n\t\t\t\n\t\t\tlet slave = new $mol_atom<number>( 'slave' , next => counter.get() )\n\t\t\tslave.actualize()\n\t\t\t\n\t\t\tlet changed = false\n\t\t\t\n\t\t\t$mol_atom_task( 'task' , () => {\n\t\t\t\tlet next = counter.get() + 1\n\t\t\t\t$mol_atom_task( 'task' , ()=> {\n\t\t\t\t\tcounter.set( next ).valueOf()\n\t\t\t\t\tchanged = true\n\t\t\t\t})\n\t\t\t} )\n\t\t\t\n\t\t\t$mol_defer.run()\n\t\t\t\n\t\t\t$mol_assert_equal( counter.get() , 2 )\n\t\t\t$mol_assert_ok( changed )\n\t\t\t\n\t\t\tslave.destroyed( true )\n\t\t} ,\n\t\t\n\t\t'error handling'() {\n\n\t\t\tlet source = new $mol_atom< number >( 'source' , ( next? : number )=> {\n\t\t\t\tconst error = new Error( 'Test error' )\n\t\t\t\terror['$mol_atom_catched'] = true\n\t\t\t\tthrow error\n\t\t\t} )\n\t\t\tlet middle = new $mol_atom( 'middle' , ()=> source.get() + 1 )\n\t\t\tlet target = new $mol_atom( 'target' , ()=> middle.get() + 1 )\n\n\t\t\t$mol_assert_fail( ()=> target.get().valueOf() )\n\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\n\t\t'cached property with simple key'() {\t\t\t\t\n\n\t\t\tclass X extends $mol_object {\n\t\t\t\t@ $mol_mem_key()\n\t\t\t\tfoo( id : number , next? : Number|String ) {\n\t\t\t\t\tif( next == null ) return new Number( 123 )\n\t\t\t\t\treturn new Number( next )\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst x = new X\n\n\t\t\t// get\n\t\t\t$mol_assert_equal( x.foo( 0 ).valueOf() , 123 )\n\t\t\t$mol_assert_equal( x.foo( 0 ) , x.foo( 0 ) )\n\t\t\t$mol_assert_unique( x.foo( 0 ) , x.foo( 1 ) )\n\n\t\t\t// set\n\t\t\tx.foo( 0 , 321 )\n\t\t\t$mol_assert_equal( x.foo( 0 ).valueOf() , 321 )\n\n\t\t\t// reset\n\t\t\tx.foo( 0 , null )\n\t\t\t\n\t\t\t$mol_assert_equal( x.foo( 0 ).valueOf() , 123 )\n\n\t\t} ,\n\n\t\t'cached property with complex key'() {\n\n\t\t\tclass X extends $mol_object {\n\t\t\t\t@ $mol_mem_key()\n\t\t\t\tfoo( ids : number[] ) {\n\t\t\t\t\treturn Math.random()\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst x = new X\n\n\t\t\t$mol_assert_equal( x.foo( [ 0 , 1 ] ) , x.foo( [ 0 , 1 ] ) )\n\t\t\t$mol_assert_unique( x.foo( [ 0 , 1 ] ) , x.foo( [ 0 , 2 ] ) )\n\t\t} ,\n\n\t\t'auto sync of properties'() {\n\n\t\t\tclass X extends $mol_object {\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tfoo( next? : number ) {\n\t\t\t\t\treturn next || 1\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tbar() {\n\t\t\t\t\treturn this.foo() + 1\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\txxx() {\n\t\t\t\t\treturn this.bar() + 1\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst x = new X\n\t\t\t$mol_assert_equal( x.bar() , 2 )\n\t\t\t$mol_assert_equal( x.xxx() , 3 )\n\n\t\t\tx.foo( 5 )\n\t\t\t$mol_assert_equal( x.xxx() , 7 )\n\t\t} ,\n\n\t\t//'must fail on recursive dependency'() {\n\t\t//\n\t\t//\tclass X extends $mol_object {\n\t\t//\n\t\t//\t\t@ $mol_prop()\n\t\t//\t\tfoo() : number {\n\t\t//\t\t\treturn this.foo() + 1\n\t\t//\t\t}\n\t\t//\n\t\t//\t}\n\t\t//\n\t\t//\tvar x = new X\n\t\t//\n\t\t//\ttry {\n\t\t//\t\tx.foo().valueOf()\n\t\t//\t\t$mol_assert_fail( 'Not tracked recursive dependency' )\n\t\t//\t} catch( error ) {\n\t\t//\t\t$mol_assert_equal( error.message , 'Recursive dependency! .foo()' )\n\t\t//\t}\n\t\t//} ,\n\n\t\t'must be deferred destroyed when no longer referenced'() {\n\n\t\t\tlet foo : any\n\n\t\t\tclass B extends $mol_object {\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tshowing( next? : boolean ) {\n\t\t\t\t\tif( next === void 0 ) return true\n\t\t\t\t\treturn next\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tfoo() {\n\t\t\t\t\treturn foo = new $mol_object\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tbar() {\n\t\t\t\t\treturn this.showing() ? this.foo() : null\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar b = new B\n\n\t\t\tvar bar = b.bar()\n\t\t\t$mol_assert_ok( bar )\n\n\t\t\tb.showing( false )\n\t\t\tb.bar()\n\t\t\t$mol_defer.run()\n\t\t\t$mol_assert_ok( foo.destroyed() )\n\t\t\t$mol_assert_ok( bar.destroyed() )\n\t\t\t$mol_assert_not( b.bar() )\n\n\t\t\tb.showing( true )\n\t\t\t$mol_defer.run()\n\t\t\t$mol_assert_unique( b.bar() , bar )\n\t\t} ,\n\n\t\t'wait for data'() {\n\n\t\t\tclass Test extends $mol_object {\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tsource( next? : string , force? : $mol_atom_force ) : string {\n\t\t\t\t\tnew $mol_defer( () => {\n\t\t\t\t\t\tthis.source( 'Jin' , $mol_atom_force )\n\t\t\t\t\t} )\n\t\t\t\t\tthrow new $mol_atom_wait( 'Wait for data!' )\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tmiddle() {\n\t\t\t\t\treturn this.source()\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\ttarget() {\n\t\t\t\t\treturn this.middle()\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst t = new Test\n\n\t\t\t$mol_assert_fail( ()=> t.target().valueOf() , $mol_atom_wait )\n\n\t\t\t$mol_defer.run()\n\n\t\t\t$mol_assert_equal( t.target() , 'Jin' )\n\t\t} ,\n\n\t} )\n\n}\n","namespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'Make empty div'() {\n\t\t\tconst dom = $mol_dom_make({\n\t\t\t\tid : '$mol_dom_make_test' ,\n\t\t\t}) as HTMLSpanElement\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML , '<span id=\"$mol_dom_make_test\"></span>' )\n\t\t} ,\n\t\t\n\t\t'Make SVG'() {\n\t\t\tconst dom = $mol_dom_make({\n\t\t\t\tid : '$mol_dom_make_test' ,\n\t\t\t\tlocalName : 'svg' ,\n\t\t\t\tnamespaceURI : 'http://www.w3.org/2000/svg' ,\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( ( dom as HTMLElement ).outerHTML , '<svg id=\"$mol_dom_make_test\"></svg>' )\n\t\t\t//$mol_assert_equal( ( dom as SVGSVGElement ).viewBox.baseVal.width , 0 ) // https://github.com/tmpvar/jsdom/pull/1445\n\t\t} ,\n\t\t\n\t\t'Make input with id and value'() {\n\t\t\tconst dom = $mol_dom_make({\n\t\t\t\tid : '$mol_dom_make_test' ,\n\t\t\t\tlocalName : 'input' ,\n\t\t\t\tvalue : 123 ,\n\t\t\t}) as HTMLInputElement\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML , '<input id=\"$mol_dom_make_test\">' )\n\t\t\t$mol_assert_equal( dom.value , '123' )\n\t\t} ,\n\t\t\n\t\t'Make content'() {\n\t\t\tconst id = '$mol_dom_make_test'\n\t\t\tconst dom = $mol_dom_make({\n\t\t\t\tid : `${ id }` ,\n\t\t\t\tchildNodes : [\n\t\t\t\t\t'hello' , // string\n\t\t\t\t\t$mol_dom_make({ // Node\n\t\t\t\t\t\tid : `${ id }_inner` ,\n\t\t\t\t\t}) ,\n\t\t\t\t\t'!' ,\n\t\t\t\t]\n\t\t\t}) as HTMLSpanElement\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tdom.outerHTML ,\n\t\t\t\t'<span id=\"$mol_dom_make_test\">' +\n\t\t\t\t\t'hello' +\n\t\t\t\t\t'<span id=\"$mol_dom_make_test_inner\"></span>' +\n\t\t\t\t\t'!' +\n\t\t\t\t'</span>'\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'Make to exists element'() {\n\t\t\tconst dom1 = $mol_dom_make({\n\t\t\t\tid : '$mol_dom_make_test' ,\n\t\t\t}) as HTMLSpanElement\n\t\t\t$mol_dom_context.document.body.appendChild( dom1 )\n\t\t\t\n\t\t\tconst dom2 = $mol_dom_make({\n\t\t\t\tid : '$mol_dom_make_test' ,\n\t\t\t\tclassName : 'mol_dom_make_test'\n\t\t\t}) as HTMLSpanElement\n\t\t\t$mol_dom_context.document.body.removeChild( dom1 )\n\t\t\t\n\t\t\t$mol_assert_equal( dom1 , dom2 )\n\t\t\t$mol_assert_equal( dom1.outerHTML , '<span id=\"$mol_dom_make_test\" class=\"mol_dom_make_test\"></span>' )\n\t\t} ,\n\t\t\n\t\t'Make by another dom element'() {\n\t\t\tconst dom1 = $mol_dom_make({\n\t\t\t\tid : '$mol_dom_make_test' ,\n\t\t\t\tclassName : 'hello' ,\n\t\t\t\tchildNodes : [\n\t\t\t\t\t'world'\n\t\t\t\t] ,\n\t\t\t}) as HTMLSpanElement\n\t\t\t\n\t\t\tconst dom2 = $mol_dom_make({\n\t\t\t\tid : dom1.id ,\n\t\t\t\tclassName : dom1.className ,\n\t\t\t\tchildNodes : dom1.childNodes ,\n\t\t\t}) as HTMLSpanElement\n\t\t\t\n\t\t\t$mol_assert_equal( dom2.outerHTML , '<span id=\"$mol_dom_make_test\" class=\"hello\">world</span>' )\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'id auto generation'() {\n\t\t\t\t\n\t\t\tclass $mol_view_test_item extends $mol_view { }\n\t\t\t\n\t\t\tclass $mol_view_test_block extends $mol_view {\n\t\t\t\t\n\t\t\t\t@ $mol_mem_key()\n\t\t\t\telement( id : number ) {\n\t\t\t\t\treturn new $mol_view_test_item()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test_block()\n\t\t\t\n\t\t\t$mol_assert_equal( x.render().id , '' )\n\t\t\t$mol_assert_equal( x.element( 0 ).render().id , '.element(0)' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'caching ref to dom node'() {\n\t\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view { }\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\t\n\t\t\t$mol_assert_equal( x.render() , x.render() )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'content render'() {\n\t\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view {\n\t\t\t\tsub() {\n\t\t\t\t\treturn [ 'lol' , 5 ]\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\t\n\t\t\tvar node = x.render()\n\t\t\t\n\t\t\t$mol_assert_equal( node.innerHTML , 'lol5' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'bem attributes generation'() {\n\t\t\t\t\n\t\t\tclass $mol_view_test_item extends $mol_view { }\n\t\t\t\n\t\t\tclass $mol_view_test_block extends $mol_view {\n\t\t\t\t\n\t\t\t\t@ $mol_mem_key()\n\t\t\t\tElement( id : number ) {\n\t\t\t\t\treturn new $mol_view_test_item()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test_block()\n\t\t\t\n\t\t\t$mol_assert_equal( x.render().getAttribute( 'mol_view_test_block' ) , '' )\n\t\t\t$mol_assert_equal( x.render().getAttribute( 'mol_view' ) , '' )\n\t\t\t\n\t\t\t$mol_assert_equal( x.Element( 0 ).render().getAttribute( 'mol_view_test_block_element' ) , '' )\n\t\t\t\n\t\t\t$mol_assert_equal( x.Element( 0 ).render().getAttribute( 'mol_view_test_item' ) , '' )\n\t\t\t$mol_assert_equal( x.Element( 0 ).render().getAttribute( 'mol_view' ) , '' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'render custom attributes'() {\n\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view {\n\t\t\t\tattr() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'href' : '#haha' ,\n\t\t\t\t\t\t'required' : true ,\n\t\t\t\t\t\t'hidden' : false ,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\t\n\t\t\tvar node = x.render()\n\t\t\t\n\t\t\t$mol_assert_equal( node.getAttribute( 'href' ) , '#haha' )\n\t\t\t$mol_assert_equal( node.getAttribute( 'required' ) , 'true' )\n\t\t\t$mol_assert_equal( node.getAttribute( 'hidden' ) , null )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'render custom fields'() {\n\t\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view {\n\t\t\t\tfield() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'hidden' : true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\t\n\t\t\tvar node = x.render() as HTMLElement\n\t\t\t\n\t\t\t$mol_assert_equal( node.hidden , true )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'attach event handlers'() {\n\t\t\t\t\n\t\t\tvar clicked = false\n\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view {\n\t\t\t\tevent() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'click' : ( next? : Event ) => this.event_click( next )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tevent_click( next? : Event ) {\n\t\t\t\t\tclicked = true\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\t\n\t\t\tvar node = x.render() as HTMLElement\n\t\t\tnode.click()\n\t\t\t\n\t\t\t$mol_assert_ok( clicked )\n\t\t\t\n\t\t} ,\n\t\n\t} )\n}\n","namespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'null by default' () {\n\t\t\tconst key = String( Math.random() )\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_state_session.value( key ) , null )\n\t\t} ,\n\t\t\n\t\t'storing' () {\n\t\t\tconst key = String( Math.random() )\n\t\t\t\n\t\t\t$mol_state_session.value( key , '$mol_state_session_test' )\n\t\t\t$mol_assert_equal( $mol_state_session.value( key ) , '$mol_state_session_test' )\n\t\t\t\n\t\t\t$mol_state_session.value( key , null )\n\t\t\t$mol_assert_equal( $mol_state_session.value( key ) , null )\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'local get set delete'() {\n\t\t\t\t\t\n\t\t\tvar key = '$mol_state_local_test:' + Math.random()\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , null )\n\t\t\t\n\t\t\t$mol_state_local.value( key , 123 )\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , 123 )\n\t\t\t\n\t\t\t$mol_state_local.value( key , null )\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , null )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $.$mol {\n\t\n\t$mol_test({\n\t\t\n\t\t'handle clicks by default'() {\n\t\t\tlet clicked = false\n\t\t\t\n\t\t\tconst clicker = new $mol_button\n\t\t\tclicker.event_click = event => { clicked = true }\n\t\t\t\n\t\t\tconst element = clicker.render() as HTMLButtonElement\n\t\t\t\n\t\t\tconst event = $mol_dom_context.document.createEvent( 'mouseevent' )\n\t\t\tevent.initEvent( 'click' , true , true )\n\t\t\telement.dispatchEvent( event )\n\t\t\t\n\t\t\t$mol_assert_ok( clicked )\n\t\t} ,\n\t\t\n\t\t'no handle clicks if disabled'() {\n\t\t\tlet clicked = false\n\t\t\t\n\t\t\tconst clicker = new $mol_button\n\t\t\tclicker.event_click = event => { clicked = true }\n\t\t\tclicker.enabled = ()=> false\n\t\t\t\n\t\t\tconst element = clicker.render() as HTMLButtonElement\n\t\t\t\n\t\t\tconst event = $mol_dom_context.document.createEvent( 'mouseevent' )\n\t\t\tevent.initEvent( 'click' , true , true )\n\t\t\telement.dispatchEvent( event )\n\t\t\t\n\t\t\t$mol_assert_not( clicked )\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test( { \n\t\t\n\t\t'const returns stored value'() {\n\t\t\n\t\t\tconst foo = { bar : $mol_const( Math.random() ) }\n\t\t\t\n\t\t\t$mol_assert_equal( foo.bar() , foo.bar() )\n\t\t\t$mol_assert_equal( foo.bar() , foo.bar['()'] )\n\t\t\t\n\t\t} ,\n\n\t} )\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'convertion to primitives'() {\n\t\t\t\n\t\t\tvar unit = new $mol_unit_money_usd( 5 )\n\t\t\t\n\t\t\t$mol_assert_equal( unit.valueOf() , 5 )\n\t\t\t$mol_assert_equal( ( unit as any ) * 2 , 10 )\n\t\t\t$mol_assert_equal( unit + '' , '5' )\n\t\t\t$mol_assert_equal( `${unit}` , '5' ) // buggy ts compiler\n\t\t\t\n\t\t\t$mol_assert_equal( unit.toString() , '$5' )\n\t\t\t$mol_assert_equal( String( unit ) , '$5' )\n\t\t} ,\n\t\t\n\t\t'arithmetic'() {\n\t\t\t\t\n\t\t\tvar usd1 = new $mol_unit_money_usd( 5 )\n\t\t\tvar usd2 = new $mol_unit_money_usd( 10 )\n\t\t\tvar rur = new $mol_unit_money_rur( 5 )\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_unit.summ( usd1 , usd2 ).toString() , '$15' )\n\t\t\t$mol_assert_equal( usd1.mult( 2 ).toString() , '$10' )\n\t\t} ,\n\t\n\t} )\n}\n","module $ {\n\t$mol_test({\n\t\t\n\t\t'scalars'() {\n\t\t\t$mol_assert_equal( $jin_type( void 0 ) , 'Undefined' )\n\t\t\t$mol_assert_equal( $jin_type( null ) , 'Null' )\n\t\t\t$mol_assert_equal( $jin_type( 0 ) , 'Number' )\n\t\t\t$mol_assert_equal( $jin_type( '' ) , 'String' )\n\t\t\t$mol_assert_equal( $jin_type( false ) , 'Boolean' )\n\t\t} ,\n\t\t\n\t\t'common objects'() {\n\t\t\t$mol_assert_equal( $jin_type( {} ) , 'Object' )\n\t\t\t$mol_assert_equal( $jin_type( [] ) , 'Array' )\n\t\t\t$mol_assert_equal( $jin_type( arguments ) , 'Arguments' )\n\t\t} ,\n\t\t\n\t\t'special objects'() {\n\t\t\t//$mol_assert_equal( $jin_type( function() { return this }() ) , 'Global' )\n\t\t\t$mol_assert_equal( $jin_type( new Date ) , 'Date' )\n\t\t\t$mol_assert_equal( $jin_type( new RegExp( '' ) ) , 'RegExp' )\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","module $ {\n\t$mol_test( {\n\t\t\n\t\t'parse and serial'() {\n\t\t\t$mol_assert_equal( $jin.time.duration( 'P42.1Y' ).toString() , 'P42.1YT' )\n\t\t\t$mol_assert_equal( $jin.time.duration( 'P42.1M' ).toString() , 'P42.1MT' )\n\t\t\t$mol_assert_equal( $jin.time.duration( 'P42.1D' ).toString() , 'P42.1DT' )\n\t\t\t$mol_assert_equal( $jin.time.duration( 'PT42.1h' ).toString() , 'PT42.1H' )\n\t\t\t$mol_assert_equal( $jin.time.duration( 'PT42.1m' ).toString() , 'PT42.1M' )\n\t\t\t$mol_assert_equal( $jin.time.duration( 'PT42.1s' ).toString() , 'PT42.1S' )\n\t\t\t$mol_assert_equal( $jin.time.duration( 'P1Y2M3DT4h5m6.7s' ).toString() , 'P1Y2M3DT4H5M6.7S' )\n\t\t} ,\n\t\t\n\t\t'format typed'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\t$jin.time.duration( 'P1Y2M3DT4h5m6s' ).toString( 'P#Y#M#DT#h#m#s' ) ,\n\t\t\t\t'P1Y2M3DT4H5M6S'\n\t\t\t)\n\t\t} ,\n\t\n\t} )\n}\n","module $ {\n\t$mol_test( {\n\t\t\n\t\t'parse and serial'() {\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014' ).toString() , '2014' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01' ).toString() , '2014-01' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02' ).toString() , '2014-01-02' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02T03' ).toString() , '2014-01-02T03' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02T03:04' ).toString() , '2014-01-02T03:04' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02T03:04:05' ).toString() , '2014-01-02T03:04:05' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02T03:04:05.006' ).toString() , '2014-01-02T03:04:05.006' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02T03:04:05.006Z' ).toString() , '2014-01-02T03:04:05.006+00:00' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02T03:04:05.006+07:00' ).toString() , '2014-01-02T03:04:05.006+07:00' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02T03:04:05+07:08' ).toString() , '2014-01-02T03:04:05+07:08' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02T03:04+07:08' ).toString() , '2014-01-02T03:04+07:08' )\n\t\t\t$mol_assert_equal( $jin.time.moment( 'T03:04+07:08' ).toString() , 'T03:04+07:08' )\n\t\t\t$mol_assert_equal( $jin.time.moment( 'T03:04:05' ).toString() , 'T03:04:05' )\n\t\t\t$mol_assert_equal( $jin.time.moment( 'T03:04' ).toString() , 'T03:04' )\n\t\t\t$mol_assert_equal( $jin.time.moment( 'T03' ).toString() , 'T03' )\n\t\t} ,\n\t\t\n\t\t'format simple'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\t$jin.time.moment( '2014-01-02T01:02:03.000' ).toString( 'AD YY-M-D h:m:s' ) ,\n\t\t\t\t'21 14-1-2 1:2:3'\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'format padded'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\t$jin.time.moment( '2014-01-02T01:02:03.000' ).toString( 'YYYY-MM-DD hh:mm:ss' ) ,\n\t\t\t\t'2014-01-02 01:02:03'\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'format time zone'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\t$jin.time.moment( '2014-01-02T01:02:03+05:00' ).toString( 'Z' ) ,\n\t\t\t\t'+05:00'\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'format names'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\t$jin.time.moment( '2014-01-02T01:02:03.000' ).toString( 'Month Mon | WeekDay WD' ) ,\n\t\t\t\t'January Jan | Thursday Thu'\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'shifting'() {\n\t\t\t$mol_assert_equal( $jin.time.moment( 'T15:54:58.243+03:00' ).shift( {} ).toString() , 'T15:54:58.243+03:00' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02' ).shift( 'P1Y' ).toString() , '2015-01-02' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02' ).shift( 'P12M' ).toString() , '2015-01-02' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02' ).shift( 'P365D' ).toString() , '2015-01-02' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01-02' ).shift( 'PT8760h' ).toString() , '2015-01-02' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01' ).shift( 'PT8760h' ).toString() , '2015-01' )\n\t\t\t$mol_assert_equal( $jin.time.moment( '2014-01' ).shift( 'PT-8760h' ).toString() , '2013-01' )\n\t\t} ,\n\t\t\n\t\t'normalization'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\t$jin.time.moment( '2015-07-35' ).normal.toString() ,\n\t\t\t\t'2015-08-04'\n\t\t\t)\n\t\t} , \n\t\n\t} )\n}\n"]}